
apply plugin: 'android-library'

group 'it.sephiroth.android.library.picasso'
version '2.1.2'

dependencies {
    compile 'com.android.support:support-v4:19.0.+'
    compile 'com.squareup.okhttp:okhttp:1.2.1'
    compile 'com.intellij:annotations:9.0.4'
}

android {
    compileSdkVersion 19
    buildToolsVersion "18.1.1"

    defaultConfig {
        versionCode 1
        versionName version
        minSdkVersion 9
        targetSdkVersion 19
    }

    sourceSets {
        main {
            //manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src/main/java']
            resources.srcDirs = ['src/main/java']
            aidl.srcDirs = ['src/main/java']
            renderscript.srcDirs = ['src/main/java']
        }
    }
}

task displayInfo() {
    doLast {
        logger.lifecycle "  project name: ${project.name} (root: ${rootProject.name})"
        logger.lifecycle "  project version: ${project.version}"
        logger.lifecycle "  project group: ${project.group}"
    }
}

project.ext.outJar = project.name + '-' + project.version + '.jar'

task clearJar(type: Delete) {
    delete 'build/libs/' + project.ext.outJar
}

task makeJar(type: Copy) {
    from('build/bundles/release/')
    into('build/libs/')
    include('classes.jar')
    rename ('classes.jar', project.ext.outJar)
}

def generatePom() {
    def pom = pom{
        project {
            groupId project.group
            artifactId project.name
            version project.version
            description 'A powerful image downloading and caching library for Android. Original library at https://github.com/square/picasso'
            inceptionYear '2013'
            url 'https://github.com/sephiroth74/picasso'

            licenses {
                license {
                    name 'Apache Version 2.0'
                   url 'http://www.apache.org/licenses/LICENSE-2.0'
                    distribution 'repo'
                }
            }

            scm {
                url                 "https://github.com/sephiroth74/picasso"
                connection          "scm:git:git@github.com:sephiroth74/picasso.git"
                developerConnection "scm:git:git@github.com:sephiroth74/picasso.git"
            }

            organization {
                name 'Square, Inc.'
                url 'http://square.com'
            }

            developers {
                developer {
                    id 'square'
                    name 'Square'
                    roles {
                        role 'author'
                        role 'developer'
                    }
                }
            }

            contributors {
                contributor {
                    name 'Alessandro Crugnola'
                    email 'alessandro.crugnola@gmail.com'
                    url 'http://blog.sephiroth.it'
                    roles {
                        role 'developer'
                    }
                }
            }

            repositories {
                repository {
                    id 's3.release'
                    url 'http://maven.aviary.com/repo/release'
                }
            }
        }
    }
}

task writePom {
    ext.pomXml = file("pom.xml")
    inputs.file(project.buildFile)
    outputs.file(pomXml)
    doLast {
        generatePom().writeTo(pomXml)
    }
}

uploadArchives {
    doFirst {
        repositories.mavenDeployer.pom = generatePom()
    }

    repositories {
        mavenDeployer {
            configuration = configurations.deployerJars

            repository(url: mavenUploadServer + mavenRepo + mavenReleases){
                authentication(userName: mavenUsername, password: mavenPassword)
            }
        }
    }
}

task updateVersion {
    def source = new File("src/main/java/com/squareup/picasso/Picasso.java")

    onlyIf { task ->
        def src = project.file(source)
        def text = src.text
        def pattern = /(?ms)^\s*public static final String VERSION = "($project.version)";$/
        def matcher = ( text =~ pattern )

        if( matcher.size() > 0 ) {
            return false
        }

        return true
    }

    doLast {
        def src = project.file(source)

        def text = src.text
        def pattern = /(?ms)^(\s*)(public static final String VERSION = ")([0-9\.]+)(";)$/
        def matcher = ( text =~ pattern )

        if( matcher.size() > 0 ) {
            text = matcher.replaceFirst("\$1\$2" + project.version + "\$4")
            src.setText(text)
            logger.lifecycle "\t[${source.name}] updated to correct version: ${project.version}"
        }

    }
}

clean.dependsOn(clearJar)
build.dependsOn(writePom, makeJar)
uploadArchives.dependsOn(build)
preBuild.dependsOn(updateVersion)
